
클라이언트 - 서버 - 백엔드 - DB
               express - node.js
node.js
 - 브라우저 밖의 JS
js를 브라우저 밖으로 가지고나와서 유저가 사용할 수 있게.

node.js vs 브라우저
 - 제공하는 API가 다르다!
 - node.js는 시각적 표현이 필요하지 않으므로 UI 관련 API가 없지만 브라우저는 존재
 - window, document 객체 x/o
 - 컴퓨터 제어 API(파일 생성, 컴퓨터 정보 확인) o/x
 
 - 특정 브라우저가 js의 표존 문법 중 어디까지를 지원하는지 확인하는게 중요!


Express
 - node.js의 프레임워크

node 명령어 : js파일의 코드를 v8 엔진으로 해석해달라
 # v8 엔진 : 브라우저에서 사용되는 js컴파일러

npm install express -s
	-s == --save ->필요한 이유는 관리가 쉬워져서


리액트는 개발 끝나면 build해야 쓸 수 있다.
npm run build
접속 = 리액트로 만든 html을 보내주는것!


싱글 스레드
콜스택?이벤트루프?

https://ssminji.github.io/2020/02/19/call-stack/
콜 스택(call stack) : 프로그램이 함수 호출을 추적할 때 사용하는 것.
	# 스택 : 선입후출 리스트. 	# 큐 : 선입선출
함수를 호출하면 그것은 콜 스택으로 가게 된다.
호출하면 들어가고 실행하면 빠져나가는식.

스택이 보통 저장하는 것.
 : 지역 변수, 함수로 들어온 인수(Arguments), 호출한 함수의 스택에 대한 정보,, 반환값 주소

스택의 공간 비용
 - 알고리즘의 공간 복잡도에 영향을 줌, 특히 재귀를 사용하는 경우
재귀의 경우 호출마다 콜 스택을 잡아먹어 반복횟수에 해당하는 공간을 차지함.
대신 반복문(for 등)의 경우엔 그렇지 않다! 
그러니까 재귀 함수는 조심해라! 엄청난 콜 스택 낭비가 될 수 있다.
공간을 다쓴다면 stack overflow!

함수가 가장 마지막으로 실행하는 것이 다른 함수를 호출하는 것이라면, 그 함수의 스택은 아마 더이상 필요치 않을 것이다. 그 함수는 마지막 호출을 하기 전에 스택을 비워 공간을 절약할 수 있다.

이것은 Tail Call Optimization(TCO)라 불린다. 만약 재귀함수가 TCO로 최적화되었다면, 아마 거대한 콜 스택을 만들지 않게될 것이다.

일반적으로, 대부분의 언어는 TCO를 제공하지 않는다. Scheme은 TCO를 보장해주는 몇 안되는 언어 중 하나이다. 몇몇 Ruby, C, 그리고 자바스크립트는 TCO를 해 주지만, Pyhon과 Java는 절대 아니다.

------------------------------------------------
https://intrepidgeeks.com/tutorial/react-three-points-to-note-when-using-setstate
setState는 비동기적이다?
state를 수정하고 직접 확인하면 이전 state를 볼 수 있다.

setState가 야기하는 불필요한 재렌더링

-------------------------------------------------
https://heytech.tistory.com/245

promise - 비동기 처리에 활용되는 객체

promise의 상태(State)
 - Pending(대기)  : 비동기 로직 처리의 미완료 상태
 - Fulfilled(이행): 비동기 로직 처리가 완료된 상태로 promise 결과값 반환 상태
 - Rejected(실패) : 비동기 로직 처리의 실패 혹은 오류 상태

Pending
 new Promise();
 객체를 생성하면 대기 상태가 됨.

 new Promise((resolve, reject) => {});
 콜백 함수를 선언할 수 있으며, 인자는 resolve와 reject

Fulfilled 
 new Promise((resolve, reject) => {
	resolve();
 });
	resolve를 실행하면 Fulfilled 상태. 완료된 상태라고도 함.
 
 .then(resolveData => console.log(resolveData));
 .then을 통해 결과값을 받을 수 있다. - App.js:30

Rejected
 new Promise((resolve, reject) => {
	reject();
 })
	마찬가지로 실패 상태가 됨.
 .catch(err => console.log(err));

어떻게 쓰나
 Promise 객체 내부에서 조건에 따라 then 혹은 catch를 활용.

  new Promise( (resolve, reject) => {
      if ( 3 > 4 ){
        resolve(100);
      } else {
        reject(200);
      }
    })
    .then((result) => {
      console.log("resolve: ", result);
    })
    .catch((result) => {
      console.log("reject: " ,result);
    })


-------------------------------------------------
fetch : 쭉 뻗어 어딘가에 있는 것을 가져오기 라는 뜻.
 - request나 response 같은 http 파이프라인을 구성하는 요소를 조작할 수 있게 해주는 API

fetch 함수
 - js를 사용하면 필요할 때 서버에 네트워크 요청을 보내고 새 정보를 받아오는 일을 할 수 있다.
	이는 http 요청에 최적화 되어있고 상태도 잘 추상화 되어있고, promise를 기반으로 하기 때문에
	상태에 따른 로직을 추가하고 처리하는데 최적화되어 있다.
	네트워크 요청이 이루어지는 경우 
	 - 주문 전송, 사용자 정보 읽기, 서버에서 최신 정보 가져오기.
	그런데 페이지 새로 고침 없이도 가능하다는것.
 - 사용법
	let promise = fetch(url, [options])
	url : 접근하려는 url
	options : 선택 매개변수, method나 header 등을 지정할 수 있다.

	fetch('url')
	.then(response => response.json())
	.then(response => data.filter(item => item.isRequired));

		// function(response){} === response => {}
		// 파라미터가 하나밖에 없는 경우 괄호 생략가능
	
	fetch API는 3개의 interfeace를 도입하고 있는데 Headers, Request, Response이다.

-=------------------------------------------------------------------------------

restful : api
서버와 클라이언트 간 통신을 위한 규약?
http 인프라를 그대로 사용하기 때문에 별도의 인프라 구축이 필요 없다.

 rest? 분산 시스템 설계를 위한 아키텍쳐 스타일? = 사이트 구성 원리
 restful? rest한!

--------------------------------------------------------------------

require('./');
 : 모듈을 로드해주는 함수(import같은)

exports.내보낼이름 = 함수이름
묶어서 내보낼땐 module.exports = { ,}

const fs = require('fs');  : fs(file system), 경로를 표시할 필요없이 싹긁어옴
let fileList = fs.readdirSync('.');
 => 파일 목록을 배열에 넣어줌.
fs.writeFileSync('new', 'Hello node');
 => 새 파일 생성

const os = require('os');  : os(운영체제)
console.log(os.cpus());
 => cpu정보를 리턴함.

서드파티 모듈? 다른 개발자나 회사들이 만들어서 인터넷상의 공개 저장소에서 제공하는 모듈
 npm install 모듈명 을 통해 다운받아 require()를 통해 가져옴.

함수이름 뒤에 Sync가 붙으면 대체로 동기 실행하는 함수.

콜백 함수. 어떤 작업이 완료되었을 때 실행할 함수.

const EventEmitter = require('events');
const myEmitter = new EventEmitter();

myEmitter.on('test', () => {
	console.log('Success!');
})
// on:이벤트핸들러를 설정 - test이벤트가 발생하면 Success!를 출력
myEmitter.emit('test');
// emit:이벤트발생 - test이벤트 발생!

 - 순서를 바꾸면 안된다. 발생하기 전에 콜백 설정을 꼭 먼저 해야한다.
 - 하나의 이벤트에 대해 여러 콜백을 설정할 수 있다.

 - once():이벤트핸들러를 설정, 하지만 단 한번만 반응하고 더 반응하지 않음.
 - listeners():설정된 이벤트핸들러를 나열
 - off():이벤트핸들러 해제

myEmitter.on('test', (arg1, arg2, arg3) => {
	console.log(arg1); console.log(arg2);
});
myEmitter.emit('test', 'apple', 'banana', 'pear');
인자를 보내줄땐 이렇게
더 많은 인자를 받으면 undefined, 더 적은 인자를 받을 수 있다.
객체를 보내는 것도 가능하며 자주 사용된다.

url = protocol + host + pathname + search
let url = new URL('대충url');
url.host 등으로 호출가능

npm install -g nodemon
 -g : global, 전역설치. 하나의 패키지를 실행파일처럼 사용할 수 있다?